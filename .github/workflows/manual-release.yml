name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false
      draft:
        description: 'Create as draft'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
    steps:
    - name: Validate version format
      id: validate
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Error: Version must follow semantic versioning (e.g., v1.2.3 or v1.2.3-beta1)"
          exit 1
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-latest
    needs: validate-version
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmediainfo0v5 libmediainfo-dev

    - name: Create virtual environment
      run: uv venv

    - name: Install dependencies
      run: |
        uv pip install -e .
        uv pip install pytest pytest-cov black ruff mypy

    - name: Run tests
      run: uv run pytest

    - name: Run linting
      run: |
        uv run black --check media_renamer/
        uv run ruff check media_renamer/

    - name: Run type checking
      run: uv run mypy media_renamer/

  update-version:
    runs-on: ubuntu-latest
    needs: [validate-version, test]
    
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update version in pyproject.toml
      run: |
        VERSION="${{ needs.validate-version.outputs.version }}"
        # Remove 'v' prefix for pyproject.toml
        CLEAN_VERSION=${VERSION#v}
        sed -i "s/version = \".*\"/version = \"$CLEAN_VERSION\"/" pyproject.toml

    - name: Commit version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml
        git commit -m "chore: bump version to ${{ needs.validate-version.outputs.version }}" || exit 0
        git push

    - name: Create and push tag
      run: |
        git tag ${{ needs.validate-version.outputs.version }}
        git push origin ${{ needs.validate-version.outputs.version }}

  build-release-docker:
    runs-on: ubuntu-latest
    needs: [validate-version, update-version]
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.validate-version.outputs.version }}

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}},value=${{ needs.validate-version.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-version.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.validate-version.outputs.version }}
          type=raw,value=latest,enable=${{ !github.event.inputs.prerelease }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        target: runtime
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  build-release-binaries:
    runs-on: ${{ matrix.os }}
    needs: [validate-version, update-version]
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: media-renamer-linux-amd64
            binary_path: dist/media-renamer
          - os: macos-latest
            artifact_name: media-renamer-macos-universal
            binary_path: dist/media-renamer
          - os: windows-latest
            artifact_name: media-renamer-windows-amd64
            binary_path: dist/media-renamer.exe

    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ needs.validate-version.outputs.version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libmediainfo0v5 libmediainfo-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install media-info

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install mediainfo

    - name: Set up Python
      run: uv python install 3.11

    - name: Create virtual environment
      run: uv venv

    - name: Install dependencies
      run: |
        uv pip install -e .
        uv pip install pyinstaller

    - name: Build binary
      run: uv run python build_binary.py

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.binary_path }}

  create-release:
    runs-on: ubuntu-latest
    needs: [validate-version, test, build-release-docker, build-release-binaries]
    
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.validate-version.outputs.version }}
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ needs.validate-version.outputs.version }}"
        
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        echo "## 🚀 What's New in $VERSION" > release_notes.md
        echo "" >> release_notes.md
        
        if [ -n "$PREV_TAG" ]; then
          echo "### 📝 Changes since $PREV_TAG" >> release_notes.md
          echo "" >> release_notes.md
          git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD --no-merges >> release_notes.md
        else
          echo "### 📝 Initial Release" >> release_notes.md
          echo "" >> release_notes.md
          echo "This is the first release of media-renamer!" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## 🐳 Docker Images" >> release_notes.md
        echo "" >> release_notes.md
        echo "```bash" >> release_notes.md
        echo "# Latest release" >> release_notes.md
        echo "docker pull ghcr.io/${{ github.repository }}:$VERSION" >> release_notes.md
        echo "" >> release_notes.md
        echo "# Specific version" >> release_notes.md
        echo "docker pull ghcr.io/${{ github.repository }}:latest" >> release_notes.md
        echo "```" >> release_notes.md
        echo "" >> release_notes.md
        echo "## 📦 Binary Downloads" >> release_notes.md
        echo "" >> release_notes.md
        echo "Download the appropriate binary for your platform from the assets below:" >> release_notes.md
        echo "" >> release_notes.md
        echo "- **Linux (x64)**: \`media-renamer-linux-amd64\`" >> release_notes.md
        echo "- **macOS (Universal)**: \`media-renamer-macos-universal\`" >> release_notes.md
        echo "- **Windows (x64)**: \`media-renamer-windows-amd64.exe\`" >> release_notes.md
        
        # Set output for use in release creation
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate-version.outputs.version }}
        name: Release ${{ needs.validate-version.outputs.version }}
        body: ${{ steps.release_notes.outputs.release_notes }}
        draft: ${{ github.event.inputs.draft }}
        prerelease: ${{ github.event.inputs.prerelease }}
        files: |
          artifacts/media-renamer-linux-amd64/media-renamer
          artifacts/media-renamer-macos-universal/media-renamer
          artifacts/media-renamer-windows-amd64/media-renamer.exe
        token: ${{ secrets.GITHUB_TOKEN }}