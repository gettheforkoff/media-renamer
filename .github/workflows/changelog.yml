name: Update Changelog

on:
  push:
    branches: 
      - main
    paths:
      - 'media_renamer/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'README.md'
      - 'Dockerfile'
  release:
    types: [published]

jobs:
  update-changelog:
    runs-on: ubuntu-latest
    if: "github.event_name == 'release' || !contains(github.event.head_commit.message, '[skip changelog]')"
    
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Get latest release
      id: latest_release
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          # For release events, get the previous tag
          LATEST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          CURRENT_TAG="${{ github.event.release.tag_name }}"
        else
          # For push events, get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          CURRENT_TAG=""
        fi
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "current_tag=$CURRENT_TAG" >> $GITHUB_OUTPUT

    - name: Get commits since last release
      id: commits
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          # For release events, get commits between previous tag and current tag
          if [ -n "${{ steps.latest_release.outputs.latest_tag }}" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" ${{ steps.latest_release.outputs.latest_tag }}..${{ steps.latest_release.outputs.current_tag }} --no-merges)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" ${{ steps.latest_release.outputs.current_tag }} --no-merges)
          fi
        else
          # For push events, get commits since last tag
          if [ -n "${{ steps.latest_release.outputs.latest_tag }}" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" ${{ steps.latest_release.outputs.latest_tag }}..HEAD --no-merges)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges -10)
          fi
        fi
        
        # Create temporary file for multiline output
        echo "$COMMITS" > commits.txt
        echo "commits_file=commits.txt" >> $GITHUB_OUTPUT

    - name: Check if changelog needs update
      id: check_update
      run: |
        if [ -s commits.txt ]; then
          echo "needs_update=true" >> $GITHUB_OUTPUT
        else
          echo "needs_update=false" >> $GITHUB_OUTPUT
        fi

    - name: Update CHANGELOG.md
      if: steps.check_update.outputs.needs_update == 'true'
      run: |
        # Read current changelog
        if [ ! -f CHANGELOG.md ]; then
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
        fi
        
        # Create temporary file with new content
        {
          # Keep everything up to "## [Unreleased]"
          sed '/## \[Unreleased\]/q' CHANGELOG.md
          
          if [ "${{ github.event_name }}" == "release" ]; then
            # For releases, create a versioned entry
            echo ""
            echo "## [${{ steps.latest_release.outputs.current_tag }}] - $(date +%Y-%m-%d)"
            echo ""
            echo "### Added"
            grep -E "(add|feat|feature)" commits.txt | head -5 || echo "- No new features in this release"
            echo ""
            echo "### Changed" 
            grep -E "(change|update|improve|enhance)" commits.txt | head -5 || echo "- No changes in this release"
            echo ""
            echo "### Fixed"
            grep -E "(fix|bug|resolve)" commits.txt | head -5 || echo "- No fixes in this release"
          else
            # For regular pushes, update unreleased section
            echo ""
            echo "### Added"
            grep -E "(add|feat|feature)" commits.txt | head -5 || echo "- No new features in this update"
            echo ""
            echo "### Changed" 
            grep -E "(change|update|improve|enhance)" commits.txt | head -5 || echo "- No changes in this update"
            echo ""
            echo "### Fixed"
            grep -E "(fix|bug|resolve)" commits.txt | head -5 || echo "- No fixes in this update"
          fi
          
          echo ""
          
          # Add everything after "## [Unreleased]" section, skipping old unreleased content
          sed -n '/^## \[.*\].*[0-9]/,$p' CHANGELOG.md
          
        } > CHANGELOG_new.md
        
        mv CHANGELOG_new.md CHANGELOG.md

    - name: Commit changelog directly
      if: steps.check_update.outputs.needs_update == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add CHANGELOG.md
        if [ "${{ github.event_name }}" == "release" ]; then
          git commit -m "docs: update changelog for ${{ steps.latest_release.outputs.current_tag }} release [skip changelog]"
        else
          git commit -m "docs: update changelog with recent changes [skip changelog]"
        fi
        git push
        
    - name: Clean up
      run: rm -f commits.txt