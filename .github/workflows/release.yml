name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.13

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmediainfo0v5 libmediainfo-dev

    - name: Create virtual environment
      run: uv venv

    - name: Install dependencies
      run: |
        uv pip install -e .
        uv pip install pytest pytest-cov black ruff mypy

    - name: Run tests
      run: uv run pytest

    - name: Run linting
      run: |
        uv run black --check media_renamer/
        uv run ruff check media_renamer/

    - name: Run type checking
      run: uv run mypy media_renamer/

  update-version:
    runs-on: ubuntu-latest
    needs: test
    
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update version in pyproject.toml
      run: |
        VERSION="${{ github.ref_name }}"
        # Remove 'v' prefix for pyproject.toml
        CLEAN_VERSION=${VERSION#v}
        # Only update the project version (line 7), not tool configurations
        sed -i "7s/version = \".*\"/version = \"$CLEAN_VERSION\"/" pyproject.toml

    - name: Commit version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml
        git commit -m "chore: bump version to ${{ github.ref_name }}" || exit 0
        git push

  build-release-docker:
    runs-on: ubuntu-latest
    needs: [test, update-version]
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        ref: ${{ github.ref_name }}

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        target: runtime
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  build-release-binaries:
    runs-on: ${{ matrix.os }}
    needs: [test, update-version]
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: media-renamer-linux-amd64
            binary_path: dist/media-renamer
          - os: macos-latest
            artifact_name: media-renamer-macos-universal
            binary_path: dist/media-renamer
          - os: windows-latest
            artifact_name: media-renamer-windows-amd64
            binary_path: dist/media-renamer.exe

    steps:
    - uses: actions/checkout@v5
      with:
        ref: ${{ github.ref_name }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libmediainfo0v5 libmediainfo-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install media-info

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install mediainfo

    - name: Set up Python
      run: uv python install 3.13

    - name: Create virtual environment
      run: uv venv

    - name: Install dependencies
      run: |
        uv pip install -e .
        uv pip install pyinstaller

    - name: Build binary
      run: uv run python build_binary.py

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.binary_path }}

  create-release:
    runs-on: ubuntu-latest
    needs: [test, update-version, build-release-docker, build-release-binaries]
    if: always() && needs.test.result == 'success' && needs.update-version.result == 'success' && needs.build-release-docker.result == 'success'
    
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        ref: ${{ github.ref_name }}
        fetch-depth: 0

    - name: Download Linux binary
      uses: actions/download-artifact@v4
      with:
        name: media-renamer-linux-amd64
        path: artifacts/media-renamer-linux-amd64
      continue-on-error: true

    - name: Download macOS binary
      uses: actions/download-artifact@v4
      with:
        name: media-renamer-macos-universal
        path: artifacts/media-renamer-macos-universal
      continue-on-error: true

    - name: Download Windows binary
      uses: actions/download-artifact@v4
      with:
        name: media-renamer-windows-amd64
        path: artifacts/media-renamer-windows-amd64
      continue-on-error: true

    - name: Debug artifact structure
      run: |
        echo "Artifact directory structure:"
        find artifacts -type f -ls
        echo "Files found:"
        find artifacts -name "media-renamer*" -type f
        echo "Detailed listing:"
        ls -la artifacts/
        for dir in artifacts/*/; do
          echo "Contents of $dir:"
          ls -la "$dir"
        done
    
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Copy artifacts that exist, skip if they don't exist
        if [ -f artifacts/media-renamer-linux-amd64/media-renamer ]; then
          cp artifacts/media-renamer-linux-amd64/media-renamer release-assets/media-renamer-linux-amd64
          echo "✅ Linux binary added"
        else
          echo "❌ Linux binary not found"
        fi
        
        if [ -f artifacts/media-renamer-macos-universal/media-renamer ]; then
          cp artifacts/media-renamer-macos-universal/media-renamer release-assets/media-renamer-macos-universal
          echo "✅ macOS binary added"
        else
          echo "❌ macOS binary not found"
        fi
        
        if [ -f artifacts/media-renamer-windows-amd64/media-renamer.exe ]; then
          cp artifacts/media-renamer-windows-amd64/media-renamer.exe release-assets/media-renamer-windows-amd64.exe
          echo "✅ Windows binary added"
        else
          echo "❌ Windows binary not found"
        fi
        
        echo "Release assets prepared:"
        ls -la release-assets/

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        CURRENT_TAG=${GITHUB_REF#refs/tags/}
        
        echo "## 🚀 What's New in $CURRENT_TAG" > changelog.md
        echo "" >> changelog.md
        
        if [ -n "$PREV_TAG" ]; then
          echo "### 📝 Changes since $PREV_TAG" >> changelog.md
          echo "" >> changelog.md
          git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD --no-merges >> changelog.md
        else
          echo "### 📝 Initial Release" >> changelog.md
          echo "" >> changelog.md
          echo "This is the first release of media-renamer!" >> changelog.md
        fi
        
        echo "" >> changelog.md
        echo "## 🐳 Docker Images" >> changelog.md
        echo "" >> changelog.md
        echo "```bash" >> changelog.md
        echo "# Latest release" >> changelog.md
        echo "docker pull ghcr.io/${{ github.repository }}:$CURRENT_TAG" >> changelog.md
        echo "" >> changelog.md
        echo "# Specific version" >> changelog.md
        echo "docker pull ghcr.io/${{ github.repository }}:latest" >> changelog.md
        echo "```" >> changelog.md
        echo "" >> changelog.md
        echo "## 📦 Binary Downloads" >> changelog.md
        echo "" >> changelog.md
        echo "Download the appropriate binary for your platform from the assets below:" >> changelog.md
        echo "" >> changelog.md
        echo "- **Linux (x64)**: \`media-renamer-linux-amd64\`" >> changelog.md
        echo "- **macOS (Universal)**: \`media-renamer-macos-universal\`" >> changelog.md
        echo "- **Windows (x64)**: \`media-renamer-windows-amd64.exe\`" >> changelog.md
        
        # Set output for use in release creation
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat changelog.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Update CHANGELOG.md
      run: |
        # Fetch latest main to avoid conflicts
        git fetch origin main
        git checkout main
        git reset --hard origin/main
        
        # Get commits for this release using the tag commit
        PREV_TAG=$(git describe --tags --abbrev=0 ${{ github.sha }}^ 2>/dev/null || echo "")
        CURRENT_TAG=${GITHUB_REF#refs/tags/}
        
        # Read current changelog or create if it doesn't exist
        if [ ! -f CHANGELOG.md ]; then
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## [Unreleased]" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
        fi
        
        if [ -n "$PREV_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- %s (%h)" $PREV_TAG..${{ github.sha }} --no-merges)
        else
          COMMITS=$(git log --pretty=format:"- %s (%h)" ${{ github.sha }} --no-merges)
        fi
        
        # Create temporary file for commits
        echo "$COMMITS" > commits.txt
        
        # Create temporary file with new content
        {
          # Keep everything up to "## [Unreleased]"
          sed '/## \[Unreleased\]/q' CHANGELOG.md
          
          # Add new release section
          echo ""
          echo "## [$CURRENT_TAG] - $(date +%Y-%m-%d)"
          echo ""
          echo "### Added"
          grep -E "(add|feat|feature)" commits.txt | head -5 || echo "- No new features in this release"
          echo ""
          echo "### Changed" 
          grep -E "(change|update|improve|enhance)" commits.txt | head -5 || echo "- No changes in this release"
          echo ""
          echo "### Fixed"
          grep -E "(fix|bug|resolve)" commits.txt | head -5 || echo "- No fixes in this release"
          echo ""
          
          # Add everything after "## [Unreleased]" section, skipping old unreleased content
          sed -n '/^## \[.*\].*[0-9]/,$p' CHANGELOG.md
          
        } > CHANGELOG_new.md
        
        mv CHANGELOG_new.md CHANGELOG.md
        rm -f commits.txt

    - name: Commit changelog update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Commit and push if there are changes
        if ! git diff --quiet CHANGELOG.md; then
          git add CHANGELOG.md
          git commit -m "docs: update changelog for ${{ github.ref_name }} release [skip changelog]"
          git push origin main
        else
          echo "No changelog changes to commit"
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}
        files: release-assets/*
        token: ${{ secrets.GITHUB_TOKEN }}