name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmediainfo0v5 libmediainfo-dev

    - name: Create virtual environment
      run: uv venv --python ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        uv pip install -e .
        uv pip install pytest pytest-cov black ruff mypy

    - name: Run tests
      run: uv run pytest --cov=media_renamer --cov-report=xml

    - name: Run linting
      run: |
        uv run black --check media_renamer/
        uv run ruff check media_renamer/

    - name: Run type checking
      run: uv run mypy media_renamer/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        target: runtime
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  build-binary:
    runs-on: ${{ matrix.os }}
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: media-renamer-linux
            binary_path: dist/media-renamer
          - os: macos-latest
            artifact_name: media-renamer-macos
            binary_path: dist/media-renamer
          - os: windows-latest
            artifact_name: media-renamer-windows
            binary_path: dist/media-renamer.exe

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libmediainfo0v5 libmediainfo-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install media-info

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install mediainfo

    - name: Set up Python
      run: uv python install 3.11

    - name: Create virtual environment
      run: uv venv

    - name: Install dependencies
      run: |
        uv pip install -e .
        uv pip install pyinstaller

    - name: Build binary
      run: uv run python build_binary.py

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.binary_path }}
        retention-days: 30